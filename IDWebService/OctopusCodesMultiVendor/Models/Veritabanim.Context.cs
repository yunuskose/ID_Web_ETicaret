//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IDETicaret.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ETicaretEntities : DbContext
    {
        public ETicaretEntities()
            : base("name=ETicaretEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AspNet_SqlCacheTablesForChangeNotification> AspNet_SqlCacheTablesForChangeNotification { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<MemberShip> MemberShip { get; set; }
        public virtual DbSet<MemberShipVendor> MemberShipVendor { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrdersDetail> OrdersDetail { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<Page> Page { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<Photo> Photo { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<HomeProducts> HomeProducts { get; set; }
        public virtual DbSet<Bankalar> Bankalar { get; set; }
        public virtual DbSet<Ilceler> Ilceler { get; set; }
        public virtual DbSet<PosOdemeleri> PosOdemeleri { get; set; }
        public virtual DbSet<Sehirler> Sehirler { get; set; }
        public virtual DbSet<Adresler> Adresler { get; set; }
    
        public virtual ObjectResult<p_StokAra_Result> p_StokAra(string ara, string kategori1, string kategori2, string kategori3, string kategori4, Nullable<int> sayfa)
        {
            var araParameter = ara != null ?
                new ObjectParameter("Ara", ara) :
                new ObjectParameter("Ara", typeof(string));
    
            var kategori1Parameter = kategori1 != null ?
                new ObjectParameter("Kategori1", kategori1) :
                new ObjectParameter("Kategori1", typeof(string));
    
            var kategori2Parameter = kategori2 != null ?
                new ObjectParameter("Kategori2", kategori2) :
                new ObjectParameter("Kategori2", typeof(string));
    
            var kategori3Parameter = kategori3 != null ?
                new ObjectParameter("Kategori3", kategori3) :
                new ObjectParameter("Kategori3", typeof(string));
    
            var kategori4Parameter = kategori4 != null ?
                new ObjectParameter("Kategori4", kategori4) :
                new ObjectParameter("Kategori4", typeof(string));
    
            var sayfaParameter = sayfa.HasValue ?
                new ObjectParameter("Sayfa", sayfa) :
                new ObjectParameter("Sayfa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_StokAra_Result>("p_StokAra", araParameter, kategori1Parameter, kategori2Parameter, kategori3Parameter, kategori4Parameter, sayfaParameter);
        }
    
        public virtual ObjectResult<Product> f_StokAra(string ara, string kategori1, string kategori2, string kategori3, string kategori4, Nullable<int> sayfa)
        {
            var araParameter = ara != null ?
                new ObjectParameter("Ara", ara) :
                new ObjectParameter("Ara", typeof(string));
    
            var kategori1Parameter = kategori1 != null ?
                new ObjectParameter("Kategori1", kategori1) :
                new ObjectParameter("Kategori1", typeof(string));
    
            var kategori2Parameter = kategori2 != null ?
                new ObjectParameter("Kategori2", kategori2) :
                new ObjectParameter("Kategori2", typeof(string));
    
            var kategori3Parameter = kategori3 != null ?
                new ObjectParameter("Kategori3", kategori3) :
                new ObjectParameter("Kategori3", typeof(string));
    
            var kategori4Parameter = kategori4 != null ?
                new ObjectParameter("Kategori4", kategori4) :
                new ObjectParameter("Kategori4", typeof(string));
    
            var sayfaParameter = sayfa.HasValue ?
                new ObjectParameter("Sayfa", sayfa) :
                new ObjectParameter("Sayfa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("f_StokAra", araParameter, kategori1Parameter, kategori2Parameter, kategori3Parameter, kategori4Parameter, sayfaParameter);
        }
    
        public virtual ObjectResult<Product> f_StokAra(string ara, string kategori1, string kategori2, string kategori3, string kategori4, Nullable<int> sayfa, MergeOption mergeOption)
        {
            var araParameter = ara != null ?
                new ObjectParameter("Ara", ara) :
                new ObjectParameter("Ara", typeof(string));
    
            var kategori1Parameter = kategori1 != null ?
                new ObjectParameter("Kategori1", kategori1) :
                new ObjectParameter("Kategori1", typeof(string));
    
            var kategori2Parameter = kategori2 != null ?
                new ObjectParameter("Kategori2", kategori2) :
                new ObjectParameter("Kategori2", typeof(string));
    
            var kategori3Parameter = kategori3 != null ?
                new ObjectParameter("Kategori3", kategori3) :
                new ObjectParameter("Kategori3", typeof(string));
    
            var kategori4Parameter = kategori4 != null ?
                new ObjectParameter("Kategori4", kategori4) :
                new ObjectParameter("Kategori4", typeof(string));
    
            var sayfaParameter = sayfa.HasValue ?
                new ObjectParameter("Sayfa", sayfa) :
                new ObjectParameter("Sayfa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("f_StokAra", mergeOption, araParameter, kategori1Parameter, kategori2Parameter, kategori3Parameter, kategori4Parameter, sayfaParameter);
        }
    }
}
